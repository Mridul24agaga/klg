"use client"

import { useState, useEffect } from "react"
import { Eye } from "lucide-react"
import { createClient } from "@/utitls/supabase/client"
import Link from "next/link"

type Blog = {
  id: string
  title: string
  content: string
  created_at: string
  url: string
}

export default function PastBlogs() {
  const [pastBlogs, setPastBlogs] = useState<Blog[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedBlog, setSelectedBlog] = useState<Blog | null>(null)
  const supabase = createClient()

  useEffect(() => {
    const fetchPastBlogs = async () => {
      try {
        setLoading(true)

        // Get the current user
        const {
          data: { user },
        } = await supabase.auth.getUser()

        if (!user) {
          setLoading(false)
          return
        }

        // Fetch blogs generated by this user
        const { data, error } = await supabase
          .from("blogs")
          .select("*")
          .eq("user_id", user.id)
          .order("created_at", { ascending: false })

        if (error) {
          console.error("Error fetching past blogs:", error)
          return
        }

        setPastBlogs(data || [])
      } catch (error) {
        console.error("Error in fetchPastBlogs:", error)
      } finally {
        setLoading(false)
      }
    }

    fetchPastBlogs()
  }, [supabase])

  const viewBlog = (blog: Blog) => {
    setSelectedBlog(blog)
  }

  const closeBlogView = () => {
    setSelectedBlog(null)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="animate-spin w-6 h-6 border-4 border-blue-500 border-t-transparent rounded-full"></div>
        <p className="ml-3 text-gray-700">Loading past blogs...</p>
      </div>
    )
  }

  return (
    <div className="mt-10">
      <h2 className="text-2xl font-bold mb-4">Your Past Blogs</h2>

      {pastBlogs.length === 0 ? (
        <p className="text-gray-500">You haven't generated any blogs yet.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {pastBlogs.map((blog) => (
            <div key={blog.id} className="border border-gray-200 rounded-lg hover:shadow-md transition-shadow bg-white">
              <div className="p-4 border-b border-gray-100">
                <h3 className="text-lg font-semibold truncate">{blog.title}</h3>
                <p className="text-sm text-gray-500 truncate">{new Date(blog.created_at).toLocaleDateString()}</p>
              </div>
              <div className="p-4">
                <p className="text-gray-600 line-clamp-2 mb-3">
                  {blog.content ? `${blog.content.substring(0, 100)}...` : "No content available"}
                </p>
                <div className="flex justify-between items-center">
                  <button
                    className="flex items-center gap-2 px-3 py-1.5 text-sm border border-gray-300 rounded hover:bg-gray-50"
                    onClick={() => viewBlog(blog)}
                  >
                    <Eye className="h-4 w-4" />
                    View Blog
                  </button>
                  <Link href={`/generated/${blog.id}`} className="text-blue-600 hover:text-blue-800 text-sm">
                    Open Page
                  </Link>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {selectedBlog && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-auto">
            <div className="p-6">
              <h2 className="text-2xl font-bold mb-2">{selectedBlog.title}</h2>
              <p className="text-gray-500 mb-4">
                Generated from: {selectedBlog.url}
                <br />
                Date: {new Date(selectedBlog.created_at).toLocaleString()}
              </p>
              <div className="prose max-w-none">
                {selectedBlog.content ? (
                  selectedBlog.content.split("\n").map((paragraph, index) => (
                    <p key={index} className="mb-4">
                      {paragraph}
                    </p>
                  ))
                ) : (
                  <p>No content available</p>
                )}
              </div>
              <div className="mt-6 flex justify-end">
                <button onClick={closeBlogView} className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
